import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import assert from 'assert';
import mongodb from 'mongodb';

 
const app = express();
const url = 'mongodb://mongo:27017'; // mongo:27017 => docker-service-name:service-port

const jsonParser = bodyParser.json();
var urlencodedParser = bodyParser.urlencoded({ extended: false });

const dbName = 'sensors';
const client = new mongodb.MongoClient(`${url}/${dbName}`);

// TODO: replica set
// https://medium.com/pnpsolution/%E0%B8%A7%E0%B8%B4%E0%B8%98%E0%B8%B5%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B9%83%E0%B8%8A%E0%B9%89-mongodb-%E0%B9%81%E0%B8%9A%E0%B8%9A-secure-2-replica-set-379c3802a141
// https://medium.com/@thakkaryash94/mongodb-3-6-change-streams-example-with-node-js-2b9a85652c50
// const pipeline = [
//   {
//     $project: { documentKey: false }
//   }
// ];

// client.connect(function(err) {
//   assert.equal(null, err);
//   console.log("Session has been opened");

//   const sensors = client.db('sensors');
//   const changeStream = sensors.watch(pipeline);

//   changeStream.on('change', function(change) {
//     console.log(change);
//   });
// });

const getSensorsData = async (res) => {
  await client.connect(async (err) => {
    assert.equal(null, err);
    console.log("Session has been opened");

    const sensors = client.db('sensors');
  
    await sensors.collection('sensor').find().toArray(function(err, result) {
      if (err) {
        console.error(err);
        throw err;
      }
      res.json(result);
      // client.close();
    });
  });
}

const getData = async (res) => {
  await client.connect(async (err) => {
    assert.equal(null, err);
    console.log("Session has been opened");

    const sensors = client.db('sensors');
  
    await sensors.collection('positions').findOne({}, function(err, result) {
      if (err) throw err;
      res.json(result);
    })
  });
}

const insertData = async (_, res) => {
  await client.connect(async (err) => {
    assert.equal(null, err);
    console.log("Session has been opened");

    const sensors = client.db('sensors');
  
    await sensors.collection('positions').insertOne({ data: [
      {
        id: 1,
        active: true,
        lat: '19.769025',
        lng: '98.949914'
      },
      {
        id: 2,
        active: true,
        lat: '19.781939',
        lng: '98.945755'
      },
      {
        id: 3,
        active: true,
        lat: '19.784711',
        lng: '98.947046'
      },
      {
        id: 4,
        active: true,
        lat: '19.756218',
        lng: '98.953974'
      },
    ]});

    res.json({ result: true })
  });
}

app.use(cors());

app.get('/sensor/v1/sensors', (_, res) => getData(res));
app.post('/sensor/v1/sensors', jsonParser, (req, res) => insertData(req, res));

app.listen(3002, () => console.log('Example app listening on port 3002'));
